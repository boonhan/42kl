#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>

int check_line_match(int n, char *seq) // return 1 if pass check, 0 if fail
{
  printf("testing. n is %d, seq is %s\n", n, seq);
  int i;
  int j;
  int result = 4;
  
  i = 1;
  while (seq[i] != '\0')
  {
      j = 0;
      while (j < i)
      {
          if (seq[j] > seq[i])
              result--;
          j++;
      }
      i++;
  }
  printf("result is %d\n", result);
  if (n == result)
      return (1);
  else
      return (0);
}


int check_line_validity(char *seq)
{
    //printf("testing. n is %d, seq is %s\n", seq);
  int i;
  int j;
  
  i = 1;
  while (seq[i] != '\0')
  {
      j = 0;
      while (j < i)
      {
          if (seq[j] == seq[i])
          {
              return (0);
          }
          j++;
      }
      i++;
  }
      return (1);
}

int *init_table() // create a 4x4 table (hardcoded under int x and int y)
{
    printf("testing init table\n");
    int x = 4;
    int y = 4;
    int *a = (int *)malloc(x * y * sizeof(int));
    int i;
    int j;
    i = 0;
    while (i < y)
    {
        j = 0;
        while (j < x)
        {
            *(a + i * y + j) = i + j; // set array value
            j++;
        }
        i++;
    }
    for (i=0; i<y; i++)
    {
        for (j=0; j<x; j++)
        {
            //printf("j is %d\n", j);
            printf("%d ", *(a + i * y + j));
        }
        printf("\n");
    }
    printf("address of a in init is %d, goes to %d\n", &a, a);
    return (a);
}

char *genseq_up(int n, int arr[6][6])
{
    int i;
    char seq[4];
    
    i = 0;
    while (i < 4)
    {
        //seq[i] = '1' + i;
        seq[i] = arr[1][i+1] + 48;
        printf("testing. seq[i] is %c. i is %d\n", seq[i], i);
        i++;
    }
}

void main()
{
    int n = 1;
    int *arr;
    arr = init_table();
    
    //printf("arr is %d\n", arr[1][1]);
    char *seq = "1432";
    genseq_up(n, arr);
    //printf("checkline result for %s is %d\n", seq, check_line_match(n, seq));
}


/*
#define ONETWO {"4123", "4213"}
#define ONETHREE {'4312', '4132', '4231'}
#define ONEFOUR {'4321'}
#define TWOTWO {'1423', '3241', '2143', '3412', '2413', '3142'}
#define TWOTHREE {'1432', '2431', '3421'}

#define TWOONE {'3214', '3124'}
#define THREEONE {'2134', '2314', '1324'}
#define THREETWO {'2341', '1342', '1243'}
#define FOURONE {'1234'}

possible(n1, n2)
- returns {} of possible combis.

check n1, n2.
tries = possible(n1, n2);
while tries[i] != '\0'
  array[0] = tries[i][0] // this can be another loop.
  array[1] = tries[i][1]
  array[2] = tries[i][2]
  array[3] = tries[i][3]
  loop everything below for each i.
  i++;
  
check n1, n2.
tries = possible(n1, n2);
while tries[i] != '\0'
  
row 2 can only have j combinations.
for each j, check() if combination is possible, given row 1. edit j.
loop everything below for each possible j.
if no more possible j, fail.

check n1, n2.
row 3 can only have k combinations.
for each k, check() if combination is possible, given row 1, 2. edit k.
loop everything below for each possible k.
if no possible k, fail.

row 4 is fixed, based on rows 1-3.
check n1, n2.
row 4 can only have m combinations.
is fixed row 4 == one of m ? pass : fail.

repeat the whole thing above until finding a pass.
else, fail

*/
